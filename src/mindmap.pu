@startmindmap
* プロダクト
** プロダクトマネジメント
*** 運用
** プロジェクトマネジメント
*** 管理
**** 統合(全体)
***** (立)プロジェクト憲章作成
***** <&check>インセプションデッキの作成
****** なぜやるのか？
****** どんなビジョンなのか？
****** どんな価値をもたらすのか？
****** スコープの範囲はどこか？
****** 主なステークホルダーは？
****** 基本的な解決策はどんなものになるか？
****** 主なリスクは何か？(このPJが失敗するとしたら、どんな理由か？)
****** どのくらいの作業があり、費用はいくらか？
****** トレードオフにどう向き合うか？
****** 初回リリースが可能になるのはいつか？
***** ASR ワークブック
****** 目的とスコープ
****** 対象者(ステークホルダ)
****** ビジネスのコンテキスト
******* ステークホルダー
******* ビジネス目標
****** ASR(アーキテクチャ上の重要な要求)
******* 技術的な制約
******* ビジネス上の制約
******* 品質特性の要求
******** トップシナリオ
******* 影響力のある機能要求
******** トップユーザーまたはユーザーのペルソナ
******** ユースケースまたはユーザーストーリー
****** 付録 A : 用語集
****** 付録 B : 品質特性の分類
**** スコープ
**** タイム
**** コスト
**** 品質
***** (計)品質計画
****** <&check>品質特性
******* 品質特性分類
******** 設計
********* 修正容易性
********* 保守性
********* 再利用性
********* テスト容易性
********* 製造容易性
********* 製品化までの時間
********* 構築容易性
******** 実行(運用)
********* 可用性
********* 信頼性
********* パフォーマンス
********** クエリ
********* スケーラビリティ
********* セキュリティ
********* クロール容易性
********* デプロイ容易性
********* 問い合わせ容易性
******** 概念
********* 管理容易性
********* サポート容易性
********* 簡潔さ
********* 学習容易性
******* <&check>品質特性シナリオ
******** <&check>品質特性ウェブ
***** (実)品質保証
***** (監)品質管理
**** 人的資源
**** コミュニケーション
**** リスク
**** 調達
**** ステークホルダ
***** <&check>ステークホルダマップを作る
***** <&check>ステークホルダのビジネス目標を発見する
****** POV Madlib\n(Point-of-View Madlib)
*** 開発
**** 要件定義
***** インフラ
***** アプリ
****** フロントエンド
****** バックエンド
**** 基本設計
***** <&check>設計戦略
***** 選択する
****** <&check>意思決定マトリクス
****** <&check>たった一つ選ぶ
******* パフォーマンスか精度か
******* ユーザビリティかセキュリティか
******* 納期かコストか
******* 可用性かコストか
***** 共通
****** <&check>機能要求
****** <&check>制約
****** <&check>品質特性
***** <&check>コンポーネント概要図
***** アーキテクチャパターン
****** <&check>レイヤーパターン
****** <&check>ポートとアダプター
****** <&check>パイプとフィルター
****** <&check>サービス指向アーキテクチャ
***** インフラ
***** アプリ
****** フロントエンド
****** バックエンド
**** 詳細設計
***** インフラ
***** アプリ
****** フロントエンド
****** バックエンド
**** 稼働環境構築
**** コーディング
***** フロントエンド
***** バックエンド
****** 設計原則1
******* モジュール化
******* 関心の分離
******* カプセル化
******* 抽象化
******* 疎結合
******* 高凝集
******* 単一定義
****** 設計原則2
******* Keep It Short and Simple(KISS)\n(簡潔かつ単純にしておけ)
******* Don't Repeat Yourself(DRY)\n(繰り返すな)
******* You Aren't Going to Need It(YAGNI)\n(それはきっと必要にならない)
******* Program Intently and Expressively(PIE)\n(意図を表現してプログラミングせよ)
******* Single Level of Abstraction Principle(SLAP)\n(抽象化レベルの統一)
****** SOLID
******* Single Responsibility Principle\n（単一責務の原則）
******* Open/closed principle\n（開放閉鎖の原則）
******* Liskov substitution principle\n（リスコフの置換原則）
******* Interface segregation principle\n（インターフェース分離の原則）
******* Dependency inversion principle\n（依存性逆転の原則）
****** デザインパターン
******* GOF
******** Iterator
******** Adapter
******** Template Method
******** FactoryMethod
******** Singleton
******** Prototype
******** Builder
******** Abstract Factory
******** Bridge
******** Strategy
******** Composite
******** Decorator
******** Visitor
******** Chain of Responsibility
******** Facade
******** Mediator
******** Observer
******** Memento
******** State
******** Flyweight
******** Proxy
******** Command
******** Interpreter
**** 単体試験
***** インフラ
***** アプリ
****** 試験仕様書作成
****** 試験実施
****** 試験結果レビュー
**** 結合試験
***** インフラ
***** アプリ
****** 試験仕様書作成
****** 試験実施
****** 試験結果レビュー
**** 総合試験
***** インフラ
***** アプリ
****** 試験仕様書作成
****** 試験実施
****** 試験結果レビュー
** Ubuntu
*** Linux Mint
*** Kubuntu
*** Lubuntu
*** KDE Neon
** LMDE
** SolydXK
** SteamOS
** Raspbian with a very long name
*** <s>Raspmbc</s> => OSMC
*** <s>Raspyfi</s> => Volumio
@endmindmap

' ref. https://masuda220.hatenablog.com/entry/2020/06/26/182317
' ref. https://ktr-05.hatenablog.com/entry/2019/06/12/113617
' ref. https://qiita.com/hirokidaichi/items/d6c473d8011bd9330e63
